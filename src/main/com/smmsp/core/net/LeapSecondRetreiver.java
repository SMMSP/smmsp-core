/*
 * LeapSecondsDownloader.java
 * 
 * Copyright (C) 2012 Sean P Madden
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * If you would like to license this code under the GNU LGPL, please
 * see http://www.seanmadden.net/licensing for details.
 */
package com.smmsp.core.net;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

/**
 * Connects to HPIERS and downloads the latest bulletin-C, which contains the
 * current UTC-TAI offset (the number of leapseconds added)
 * 
 * @author Sean P Madden
 */
public final class LeapSecondRetreiver {
	
	private static final Logger LOG = Logger.getLogger(LeapSecondRetreiver.class);

	/**
	 * Empty constructor
	 */
	private LeapSecondRetreiver(){
		// do nothing.
	}
	
	/**
	 * This exception wraps any subsequence exception below.
	 * 
	 * @author Sean P Madden
	 */
	public static class LeapSecondException extends RuntimeException {
		/**
		 * Generated by eclipse
		 */
		private static final long serialVersionUID = 3587453559383920202L;

		public LeapSecondException(final Throwable cause) {
			super(cause);
		}

		public LeapSecondException(final String cause) {
			super(cause);
		}
	}

	/**
	 * The latest bulletin-C is always at this url.
	 */
	private final static String BULLETIN_C_URL = "http://hpiers.obspm.fr/iers/bul/bulc/bulletinc.dat";

	private static int downloadedSeconds = Integer.MIN_VALUE;

	/**
	 * Returns the current number of leap seconds from the HPIERS 
	 * bulletin C.
	 * @return
	 */
	public static int getLeapSeconds() {
		if (downloadedSeconds > 0) {
			return downloadedSeconds;
		}

		try {
			final HTTPConnection conn = new HTTPConnection(BULLETIN_C_URL);
			final BufferedReader read = new BufferedReader(new InputStreamReader(
					conn.getDataStream()));

			// pull out the data from the HTTP request.
			String line = "";
			while ((line = read.readLine()) != null) {
				if (line.contains("until further notice")) {
					// this line has the UTC-TAI Offset (leapseconds)
					final Pattern p = Pattern.compile(".+UTC-TAI = (.+)s.*");
					final Matcher m = p.matcher(line);
					if (!m.matches()) {
						throw new LeapSecondException(
								"Parse Error in retreival");
					}
					line = m.group(1); // use the first matched group
					line = line.replace(" ", "");// remove all spaces.
					downloadedSeconds = Integer.parseInt(line);
					return downloadedSeconds;
				}
			}
			return downloadedSeconds;
		} catch (Exception e) {
			LOG.error(e);
			throw new LeapSecondException(e);
		}
	}

}
